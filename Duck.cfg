; ** Duck Syntax -- Aug 11, 2015 -- **
; ** Version 0.2.15.8.11 **
<program> ::= <stmtlist>
<stmtlist> ::= <stmt> <stmtlist>
<stmtlist> ::= <epsilon>
<identifier-list> ::= <identifier> , <identifier-list>
<identifier-list> ::= <identifier>
<stmt> ::= import <identifier-list> <endl>
<stmt> ::= include <string>
<stmt> ::= <expr> <endl>
<stmt> ::= <endl>
<stmt> ::= <assignment> <endl>
<stmt> ::= <self-assignment> <endl>
<stmt> ::= <function-def> <endl>
<stmt> ::= <if> <endl>
<stmt> ::= <for-loop> <endl>
<stmt> ::= <for-each> <endl>
<stmt> ::= <while-loop> <endl>
<stmt> ::= <do-while> <endl>
<stmt> ::= <let-block> <endl>
<stmt> ::= <try-block> <endl>
<stmt> ::= <class> <endl>
<stmt> ::= static <assignment>
<stmt> ::= static <function-def>
<stmt> ::= return <endl>
<stmt> ::= return <expr> <endl>
<stmt> ::= break <endl>
<stmt> ::= continue <endl>
<stmt> ::= throw <expr> <endl>
<assignment> ::= <l-value> = <condition>
<self-assignment> ::= <l-value> += <arithmetic>
<self-assignment> ::= <l-value> -= <arithmetic>
<self-assignment> ::= <l-value> *= <arithmetic>
<self-assignment> ::= <l-value> /= <arithmetic>
<self-assignment> ::= <l-value> ++
<self-assignment> ::= <l-value> --
<function-def> ::= func <function-decl>
<function-decl> ::= <identifier> <parameters> <endl> <stmtlist> end
<function-decl> ::= <string> <parameters> <endl> <stmtlist> end
<class> ::= class <identifier> <opt-extends> <parameters> <endl> <stmtlist> end
<parameters> ::= ( )
<parameters> ::= ( <param-decl> )
<parameters> ::= <epsilon>
<param-decl> ::= <identifier>
<param-decl> ::= <identifier> , <param-decl>
<opt-extends> ::= : <identifier-list>
<opt-extends> ::= <epsilon>
<if> ::= if <condition> then <endl> <stmtlist> <elseif>
<elseif> ::= else <endl> <stmtlist> endif
<elseif> ::= else <if>
<elseif> ::= endif
<for-loop> ::= for <identifier> = <arithmetic> to <arithmetic> <step>
<step> ::= step <arithmetic> do <endl> <stmtlist> loop
<step> ::= do <endl> <stmtlist> loop
<for-each> ::= for <identifier> in <expr> do <endl> <stmtlist> loop
<while-loop> ::= while <condition> do <endl> <stmtlist> loop
<do-while> ::= do <endl> <stmtlist> loop while <condition> 
<let-block> ::= let <bindings> begin <endl> <stmtlist> end
<bindings> ::= <identifier> = <expr> , <bindings>
<bindings> ::= <identifier> = <expr> 
<try-block> ::= try <endl> <stmtlist> <catch-block>
<catch-block> ::= catch <l-value> <endl> <stmtlist> done
<catch-block> ::= done
<l-value> ::= <identifier>
<l-value> ::= ( <l-value> )
<l-value> ::= <reference> . <identifier>
<l-value> ::= <reference> [ <expr> ]
<expr> ::= <condition>
<condition> ::= <condition> and <logic>
<condition> ::= <condition> or <logic>
<condition> ::= <logic>
<logic> ::= not <comparison>
<logic> ::= <comparison>
<comparison> ::= <comparison> == <arithmetic>
<comparison> ::= <comparison> != <arithmetic>
<comparison> ::= <comparison> \< <arithmetic>
<comparison> ::= <comparison> > <arithmetic>
<comparison> ::= <comparison> \<= <arithmetic>
<comparison> ::= <comparison> >= <arithmetic>
<comparison> ::= <final> is <reference>
<comparison> ::= <final> is not <reference>
<comparison> ::= <arithmetic>
<arithmetic> ::= <arithmetic> + <term>
<arithmetic> ::= <arithmetic> - <term>
<arithmetic> ::= <term>
<term> ::= <term> * <factor>
<term> ::= <term> / <factor>
<term> ::= <term> mod <factor>
<term> ::= <factor>
<factor> ::= - <factor>
<factor> ::= ! <factor>
<factor> ::= * <factor>
<factor> ::= <final>
<final> ::= ( <expr> )
<final> ::= <boolean>
<final> ::= <object>
<final> ::= <reference>
<final> ::= new <reference>
<final> ::= <integer>
<final> ::= <float>
<final> ::= <string>
<reference> ::= <l-value>
<reference> ::= this
<reference> ::= <reference> ( )
<reference> ::= <reference> ( <arguments> )
<arguments> ::= <arguments>, <expr>
<arguments> ::= <expr>
<object> ::= [ ]
<object> ::= [ <array-init> ]
<object> ::= [ <dictionary-init> ]
<array-init> ::= <array-init> , <expr>
<array-init> ::= <expr>
<dictionary-init> ::= <dictionary-init> , <identifier> : <expr>
<dictionary-init> ::= <identifier> : <expr>
<boolean> ::= true
<boolean> ::= false
